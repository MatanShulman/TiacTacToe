//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Champpion", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Champpion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string locationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Bitmap pictureField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatedBy {
            get {
                return this.CreatedByField;
            }
            set {
                if ((this.CreatedByField.Equals(value) != true)) {
                    this.CreatedByField = value;
                    this.RaisePropertyChanged("CreatedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                if ((this.dateField.Equals(value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string location {
            get {
                return this.locationField;
            }
            set {
                if ((object.ReferenceEquals(this.locationField, value) != true)) {
                    this.locationField = value;
                    this.RaisePropertyChanged("location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Bitmap picture {
            get {
                return this.pictureField;
            }
            set {
                if ((object.ReferenceEquals(this.pictureField, value) != true)) {
                    this.pictureField = value;
                    this.RaisePropertyChanged("picture");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Players", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class Players : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string advisorToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int amountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Bitmap pictureArrByteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int playerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string advisorTo {
            get {
                return this.advisorToField;
            }
            set {
                if ((object.ReferenceEquals(this.advisorToField, value) != true)) {
                    this.advisorToField = value;
                    this.RaisePropertyChanged("advisorTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int amount {
            get {
                return this.amountField;
            }
            set {
                if ((this.amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.RaisePropertyChanged("amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Bitmap pictureArrByte {
            get {
                return this.pictureArrByteField;
            }
            set {
                if ((object.ReferenceEquals(this.pictureArrByteField, value) != true)) {
                    this.pictureArrByteField = value;
                    this.RaisePropertyChanged("pictureArrByte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int playerId {
            get {
                return this.playerIdField;
            }
            set {
                if ((this.playerIdField.Equals(value) != true)) {
                    this.playerIdField = value;
                    this.RaisePropertyChanged("playerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyGames", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class MyGames : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int gameIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string gameModeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string secondPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string winnerField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstPlayer {
            get {
                return this.firstPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.firstPlayerField, value) != true)) {
                    this.firstPlayerField = value;
                    this.RaisePropertyChanged("firstPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int gameId {
            get {
                return this.gameIdField;
            }
            set {
                if ((this.gameIdField.Equals(value) != true)) {
                    this.gameIdField = value;
                    this.RaisePropertyChanged("gameId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string gameMode {
            get {
                return this.gameModeField;
            }
            set {
                if ((object.ReferenceEquals(this.gameModeField, value) != true)) {
                    this.gameModeField = value;
                    this.RaisePropertyChanged("gameMode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string secondPlayer {
            get {
                return this.secondPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.secondPlayerField, value) != true)) {
                    this.secondPlayerField = value;
                    this.RaisePropertyChanged("secondPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string winner {
            get {
                return this.winnerField;
            }
            set {
                if ((object.ReferenceEquals(this.winnerField, value) != true)) {
                    this.winnerField = value;
                    this.RaisePropertyChanged("winner");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="cities", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class cities : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int amountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int amount {
            get {
                return this.amountField;
            }
            set {
                if ((this.amountField.Equals(value) != true)) {
                    this.amountField = value;
                    this.RaisePropertyChanged("amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService", CallbackContract=typeof(Client.ServiceReference1.IServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getChampList", ReplyAction="http://tempuri.org/IService/getChampListResponse")]
        Client.ServiceReference1.Champpion[] getChampList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getChampList", ReplyAction="http://tempuri.org/IService/getChampListResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Champpion[]> getChampListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/regPlayer", ReplyAction="http://tempuri.org/IService/regPlayerResponse")]
        int regPlayer(string FirstName, string LastName, bool tick, byte[] byteArr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/regPlayer", ReplyAction="http://tempuri.org/IService/regPlayerResponse")]
        System.Threading.Tasks.Task<int> regPlayerAsync(string FirstName, string LastName, bool tick, byte[] byteArr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/regChampionship", ReplyAction="http://tempuri.org/IService/regChampionshipResponse")]
        string regChampionship(int[] list, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/regChampionship", ReplyAction="http://tempuri.org/IService/regChampionshipResponse")]
        System.Threading.Tasks.Task<string> regChampionshipAsync(int[] list, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getChampionshipByPlayerId", ReplyAction="http://tempuri.org/IService/getChampionshipByPlayerIdResponse")]
        Client.ServiceReference1.Champpion[] getChampionshipByPlayerId(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getChampionshipByPlayerId", ReplyAction="http://tempuri.org/IService/getChampionshipByPlayerIdResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Champpion[]> getChampionshipByPlayerIdAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/addNewChampionship", ReplyAction="http://tempuri.org/IService/addNewChampionshipResponse")]
        string addNewChampionship(string name, string location, System.DateTime date, byte[] picture, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/addNewChampionship", ReplyAction="http://tempuri.org/IService/addNewChampionshipResponse")]
        System.Threading.Tasks.Task<string> addNewChampionshipAsync(string name, string location, System.DateTime date, byte[] picture, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAdvisors", ReplyAction="http://tempuri.org/IService/getAdvisorsResponse")]
        Client.ServiceReference1.Players[] getAdvisors(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAdvisors", ReplyAction="http://tempuri.org/IService/getAdvisorsResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> getAdvisorsAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/regAdvisors")]
        void regAdvisors(int[] list, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/regAdvisors")]
        System.Threading.Tasks.Task regAdvisorsAsync(int[] list, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllPlayers", ReplyAction="http://tempuri.org/IService/getAllPlayersResponse")]
        Client.ServiceReference1.Players[] getAllPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAllPlayers", ReplyAction="http://tempuri.org/IService/getAllPlayersResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> getAllPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getPlayerName", ReplyAction="http://tempuri.org/IService/getPlayerNameResponse")]
        string getPlayerName(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getPlayerName", ReplyAction="http://tempuri.org/IService/getPlayerNameResponse")]
        System.Threading.Tasks.Task<string> getPlayerNameAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/regToServer")]
        void regToServer(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/regToServer")]
        System.Threading.Tasks.Task regToServerAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAviableOnlinePlayers", ReplyAction="http://tempuri.org/IService/getAviableOnlinePlayersResponse")]
        Client.ServiceReference1.Players[] getAviableOnlinePlayers(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getAviableOnlinePlayers", ReplyAction="http://tempuri.org/IService/getAviableOnlinePlayersResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> getAviableOnlinePlayersAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/sendMsgToRival")]
        void sendMsgToRival(int playerId, int rivalId, string playerName, string gameType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/sendMsgToRival")]
        System.Threading.Tasks.Task sendMsgToRivalAsync(int playerId, int rivalId, string playerName, string gameType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/acceptAnswerFromRival")]
        void acceptAnswerFromRival(int playerId, bool ans, int rivalId, string gameType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/acceptAnswerFromRival")]
        System.Threading.Tasks.Task acceptAnswerFromRivalAsync(int playerId, bool ans, int rivalId, string gameType);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/myMove")]
        void myMove(int myId, int x, int rivalId, string type, bool win, int shape, int moveNumber, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/myMove")]
        System.Threading.Tasks.Task myMoveAsync(int myId, int x, int rivalId, string type, bool win, int shape, int moveNumber, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/logOut")]
        void logOut(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/logOut")]
        System.Threading.Tasks.Task logOutAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/setPlayerOnline")]
        void setPlayerOnline(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/setPlayerOnline")]
        System.Threading.Tasks.Task setPlayerOnlineAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/forfitGame")]
        void forfitGame(int rivalId, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/forfitGame")]
        System.Threading.Tasks.Task forfitGameAsync(int rivalId, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getPlayerGames", ReplyAction="http://tempuri.org/IService/getPlayerGamesResponse")]
        Client.ServiceReference1.MyGames[] getPlayerGames(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getPlayerGames", ReplyAction="http://tempuri.org/IService/getPlayerGamesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.MyGames[]> getPlayerGamesAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getMovesGameByGameId", ReplyAction="http://tempuri.org/IService/getMovesGameByGameIdResponse")]
        int[] getMovesGameByGameId(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/getMovesGameByGameId", ReplyAction="http://tempuri.org/IService/getMovesGameByGameIdResponse")]
        System.Threading.Tasks.Task<int[]> getMovesGameByGameIdAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAllPlayers", ReplyAction="http://tempuri.org/IService/wpfGetAllPlayersResponse")]
        Client.ServiceReference1.Players[] wpfGetAllPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAllPlayers", ReplyAction="http://tempuri.org/IService/wpfGetAllPlayersResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetAllPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/updatePlayerInfo")]
        void updatePlayerInfo(string first, string last, int playerId, byte[] picture);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/updatePlayerInfo")]
        System.Threading.Tasks.Task updatePlayerInfoAsync(string first, string last, int playerId, byte[] picture);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/deletePlayer")]
        void deletePlayer(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/deletePlayer")]
        System.Threading.Tasks.Task deletePlayerAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAllGames", ReplyAction="http://tempuri.org/IService/wpfGetAllGamesResponse")]
        Client.ServiceReference1.MyGames[] wpfGetAllGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAllGames", ReplyAction="http://tempuri.org/IService/wpfGetAllGamesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.MyGames[]> wpfGetAllGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetGamesByPlayer", ReplyAction="http://tempuri.org/IService/wpfGetGamesByPlayerResponse")]
        Client.ServiceReference1.MyGames[] wpfGetGamesByPlayer(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetGamesByPlayer", ReplyAction="http://tempuri.org/IService/wpfGetGamesByPlayerResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.MyGames[]> wpfGetGamesByPlayerAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetChampListByPlayer", ReplyAction="http://tempuri.org/IService/wpfGetChampListByPlayerResponse")]
        Client.ServiceReference1.Champpion[] wpfGetChampListByPlayer(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetChampListByPlayer", ReplyAction="http://tempuri.org/IService/wpfGetChampListByPlayerResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Champpion[]> wpfGetChampListByPlayerAsync(int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetPlayerByGames", ReplyAction="http://tempuri.org/IService/wpfGetPlayerByGamesResponse")]
        Client.ServiceReference1.Players[] wpfGetPlayerByGames(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetPlayerByGames", ReplyAction="http://tempuri.org/IService/wpfGetPlayerByGamesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetPlayerByGamesAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAdvisorsByGame", ReplyAction="http://tempuri.org/IService/wpfGetAdvisorsByGameResponse")]
        Client.ServiceReference1.Players[] wpfGetAdvisorsByGame(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAdvisorsByGame", ReplyAction="http://tempuri.org/IService/wpfGetAdvisorsByGameResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetAdvisorsByGameAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetPlayersByChamp", ReplyAction="http://tempuri.org/IService/wpfGetPlayersByChampResponse")]
        Client.ServiceReference1.Players[] wpfGetPlayersByChamp(int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetPlayersByChamp", ReplyAction="http://tempuri.org/IService/wpfGetPlayersByChampResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetPlayersByChampAsync(int champId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAmountOfGames", ReplyAction="http://tempuri.org/IService/wpfGetAmountOfGamesResponse")]
        Client.ServiceReference1.Players[] wpfGetAmountOfGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAmountOfGames", ReplyAction="http://tempuri.org/IService/wpfGetAmountOfGamesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetAmountOfGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAmountOfCities", ReplyAction="http://tempuri.org/IService/wpfGetAmountOfCitiesResponse")]
        Client.ServiceReference1.cities[] wpfGetAmountOfCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/wpfGetAmountOfCities", ReplyAction="http://tempuri.org/IService/wpfGetAmountOfCitiesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.cities[]> wpfGetAmountOfCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deletChampByValue", ReplyAction="http://tempuri.org/IService/deletChampByValueResponse")]
        bool deletChampByValue(string value, string index, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/deletChampByValue", ReplyAction="http://tempuri.org/IService/deletChampByValueResponse")]
        System.Threading.Tasks.Task<bool> deletChampByValueAsync(string value, string index, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/updateChamp")]
        void updateChamp(Client.ServiceReference1.Champpion[] list, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/updateChamp")]
        System.Threading.Tasks.Task updateChampAsync(Client.ServiceReference1.Champpion[] list, int playerId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/invitePlayer")]
        void invitePlayer(string playerName, string gameType, int playerId, int rivalId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/answerFromRiavl")]
        void answerFromRiavl(bool answer, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/moveFromRival")]
        void moveFromRival(int x, string type, bool win);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/setGameId")]
        void setGameId(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/rivalForfit")]
        void rivalForfit();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService/ErrorCallBack")]
        void ErrorCallBack(string str, int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference1.IService>, Client.ServiceReference1.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public Client.ServiceReference1.Champpion[] getChampList() {
            return base.Channel.getChampList();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Champpion[]> getChampListAsync() {
            return base.Channel.getChampListAsync();
        }
        
        public int regPlayer(string FirstName, string LastName, bool tick, byte[] byteArr) {
            return base.Channel.regPlayer(FirstName, LastName, tick, byteArr);
        }
        
        public System.Threading.Tasks.Task<int> regPlayerAsync(string FirstName, string LastName, bool tick, byte[] byteArr) {
            return base.Channel.regPlayerAsync(FirstName, LastName, tick, byteArr);
        }
        
        public string regChampionship(int[] list, int playerId) {
            return base.Channel.regChampionship(list, playerId);
        }
        
        public System.Threading.Tasks.Task<string> regChampionshipAsync(int[] list, int playerId) {
            return base.Channel.regChampionshipAsync(list, playerId);
        }
        
        public Client.ServiceReference1.Champpion[] getChampionshipByPlayerId(int playerId) {
            return base.Channel.getChampionshipByPlayerId(playerId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Champpion[]> getChampionshipByPlayerIdAsync(int playerId) {
            return base.Channel.getChampionshipByPlayerIdAsync(playerId);
        }
        
        public string addNewChampionship(string name, string location, System.DateTime date, byte[] picture, int playerId) {
            return base.Channel.addNewChampionship(name, location, date, picture, playerId);
        }
        
        public System.Threading.Tasks.Task<string> addNewChampionshipAsync(string name, string location, System.DateTime date, byte[] picture, int playerId) {
            return base.Channel.addNewChampionshipAsync(name, location, date, picture, playerId);
        }
        
        public Client.ServiceReference1.Players[] getAdvisors(int playerId) {
            return base.Channel.getAdvisors(playerId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> getAdvisorsAsync(int playerId) {
            return base.Channel.getAdvisorsAsync(playerId);
        }
        
        public void regAdvisors(int[] list, int playerId) {
            base.Channel.regAdvisors(list, playerId);
        }
        
        public System.Threading.Tasks.Task regAdvisorsAsync(int[] list, int playerId) {
            return base.Channel.regAdvisorsAsync(list, playerId);
        }
        
        public Client.ServiceReference1.Players[] getAllPlayers() {
            return base.Channel.getAllPlayers();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> getAllPlayersAsync() {
            return base.Channel.getAllPlayersAsync();
        }
        
        public string getPlayerName(int playerId) {
            return base.Channel.getPlayerName(playerId);
        }
        
        public System.Threading.Tasks.Task<string> getPlayerNameAsync(int playerId) {
            return base.Channel.getPlayerNameAsync(playerId);
        }
        
        public void regToServer(int playerId) {
            base.Channel.regToServer(playerId);
        }
        
        public System.Threading.Tasks.Task regToServerAsync(int playerId) {
            return base.Channel.regToServerAsync(playerId);
        }
        
        public Client.ServiceReference1.Players[] getAviableOnlinePlayers(int playerId) {
            return base.Channel.getAviableOnlinePlayers(playerId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> getAviableOnlinePlayersAsync(int playerId) {
            return base.Channel.getAviableOnlinePlayersAsync(playerId);
        }
        
        public void sendMsgToRival(int playerId, int rivalId, string playerName, string gameType) {
            base.Channel.sendMsgToRival(playerId, rivalId, playerName, gameType);
        }
        
        public System.Threading.Tasks.Task sendMsgToRivalAsync(int playerId, int rivalId, string playerName, string gameType) {
            return base.Channel.sendMsgToRivalAsync(playerId, rivalId, playerName, gameType);
        }
        
        public void acceptAnswerFromRival(int playerId, bool ans, int rivalId, string gameType) {
            base.Channel.acceptAnswerFromRival(playerId, ans, rivalId, gameType);
        }
        
        public System.Threading.Tasks.Task acceptAnswerFromRivalAsync(int playerId, bool ans, int rivalId, string gameType) {
            return base.Channel.acceptAnswerFromRivalAsync(playerId, ans, rivalId, gameType);
        }
        
        public void myMove(int myId, int x, int rivalId, string type, bool win, int shape, int moveNumber, int gameId) {
            base.Channel.myMove(myId, x, rivalId, type, win, shape, moveNumber, gameId);
        }
        
        public System.Threading.Tasks.Task myMoveAsync(int myId, int x, int rivalId, string type, bool win, int shape, int moveNumber, int gameId) {
            return base.Channel.myMoveAsync(myId, x, rivalId, type, win, shape, moveNumber, gameId);
        }
        
        public void logOut(int playerId) {
            base.Channel.logOut(playerId);
        }
        
        public System.Threading.Tasks.Task logOutAsync(int playerId) {
            return base.Channel.logOutAsync(playerId);
        }
        
        public void setPlayerOnline(int playerId) {
            base.Channel.setPlayerOnline(playerId);
        }
        
        public System.Threading.Tasks.Task setPlayerOnlineAsync(int playerId) {
            return base.Channel.setPlayerOnlineAsync(playerId);
        }
        
        public void forfitGame(int rivalId, int gameId) {
            base.Channel.forfitGame(rivalId, gameId);
        }
        
        public System.Threading.Tasks.Task forfitGameAsync(int rivalId, int gameId) {
            return base.Channel.forfitGameAsync(rivalId, gameId);
        }
        
        public Client.ServiceReference1.MyGames[] getPlayerGames(int playerId) {
            return base.Channel.getPlayerGames(playerId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.MyGames[]> getPlayerGamesAsync(int playerId) {
            return base.Channel.getPlayerGamesAsync(playerId);
        }
        
        public int[] getMovesGameByGameId(int gameId) {
            return base.Channel.getMovesGameByGameId(gameId);
        }
        
        public System.Threading.Tasks.Task<int[]> getMovesGameByGameIdAsync(int gameId) {
            return base.Channel.getMovesGameByGameIdAsync(gameId);
        }
        
        public Client.ServiceReference1.Players[] wpfGetAllPlayers() {
            return base.Channel.wpfGetAllPlayers();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetAllPlayersAsync() {
            return base.Channel.wpfGetAllPlayersAsync();
        }
        
        public void updatePlayerInfo(string first, string last, int playerId, byte[] picture) {
            base.Channel.updatePlayerInfo(first, last, playerId, picture);
        }
        
        public System.Threading.Tasks.Task updatePlayerInfoAsync(string first, string last, int playerId, byte[] picture) {
            return base.Channel.updatePlayerInfoAsync(first, last, playerId, picture);
        }
        
        public void deletePlayer(int playerId) {
            base.Channel.deletePlayer(playerId);
        }
        
        public System.Threading.Tasks.Task deletePlayerAsync(int playerId) {
            return base.Channel.deletePlayerAsync(playerId);
        }
        
        public Client.ServiceReference1.MyGames[] wpfGetAllGames() {
            return base.Channel.wpfGetAllGames();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.MyGames[]> wpfGetAllGamesAsync() {
            return base.Channel.wpfGetAllGamesAsync();
        }
        
        public Client.ServiceReference1.MyGames[] wpfGetGamesByPlayer(int playerId) {
            return base.Channel.wpfGetGamesByPlayer(playerId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.MyGames[]> wpfGetGamesByPlayerAsync(int playerId) {
            return base.Channel.wpfGetGamesByPlayerAsync(playerId);
        }
        
        public Client.ServiceReference1.Champpion[] wpfGetChampListByPlayer(int playerId) {
            return base.Channel.wpfGetChampListByPlayer(playerId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Champpion[]> wpfGetChampListByPlayerAsync(int playerId) {
            return base.Channel.wpfGetChampListByPlayerAsync(playerId);
        }
        
        public Client.ServiceReference1.Players[] wpfGetPlayerByGames(int gameId) {
            return base.Channel.wpfGetPlayerByGames(gameId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetPlayerByGamesAsync(int gameId) {
            return base.Channel.wpfGetPlayerByGamesAsync(gameId);
        }
        
        public Client.ServiceReference1.Players[] wpfGetAdvisorsByGame(int gameId) {
            return base.Channel.wpfGetAdvisorsByGame(gameId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetAdvisorsByGameAsync(int gameId) {
            return base.Channel.wpfGetAdvisorsByGameAsync(gameId);
        }
        
        public Client.ServiceReference1.Players[] wpfGetPlayersByChamp(int champId) {
            return base.Channel.wpfGetPlayersByChamp(champId);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetPlayersByChampAsync(int champId) {
            return base.Channel.wpfGetPlayersByChampAsync(champId);
        }
        
        public Client.ServiceReference1.Players[] wpfGetAmountOfGames() {
            return base.Channel.wpfGetAmountOfGames();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.Players[]> wpfGetAmountOfGamesAsync() {
            return base.Channel.wpfGetAmountOfGamesAsync();
        }
        
        public Client.ServiceReference1.cities[] wpfGetAmountOfCities() {
            return base.Channel.wpfGetAmountOfCities();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.cities[]> wpfGetAmountOfCitiesAsync() {
            return base.Channel.wpfGetAmountOfCitiesAsync();
        }
        
        public bool deletChampByValue(string value, string index, int playerId) {
            return base.Channel.deletChampByValue(value, index, playerId);
        }
        
        public System.Threading.Tasks.Task<bool> deletChampByValueAsync(string value, string index, int playerId) {
            return base.Channel.deletChampByValueAsync(value, index, playerId);
        }
        
        public void updateChamp(Client.ServiceReference1.Champpion[] list, int playerId) {
            base.Channel.updateChamp(list, playerId);
        }
        
        public System.Threading.Tasks.Task updateChampAsync(Client.ServiceReference1.Champpion[] list, int playerId) {
            return base.Channel.updateChampAsync(list, playerId);
        }
    }
}
