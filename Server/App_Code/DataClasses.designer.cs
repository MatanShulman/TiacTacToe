#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertPlayerChampionship(PlayerChampionship instance);
  partial void UpdatePlayerChampionship(PlayerChampionship instance);
  partial void DeletePlayerChampionship(PlayerChampionship instance);
  partial void InsertGame(Game instance);
  partial void UpdateGame(Game instance);
  partial void DeleteGame(Game instance);
  partial void InsertgameMove(gameMove instance);
  partial void UpdategameMove(gameMove instance);
  partial void DeletegameMove(gameMove instance);
  partial void InsertPlayer(Player instance);
  partial void UpdatePlayer(Player instance);
  partial void DeletePlayer(Player instance);
  partial void InsertChampionship(Championship instance);
  partial void UpdateChampionship(Championship instance);
  partial void DeleteChampionship(Championship instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<PlayerChampionship> PlayerChampionships
	{
		get
		{
			return this.GetTable<PlayerChampionship>();
		}
	}
	
	public System.Data.Linq.Table<Game> Games
	{
		get
		{
			return this.GetTable<Game>();
		}
	}
	
	public System.Data.Linq.Table<gameMove> gameMoves
	{
		get
		{
			return this.GetTable<gameMove>();
		}
	}
	
	public System.Data.Linq.Table<Player> Players
	{
		get
		{
			return this.GetTable<Player>();
		}
	}
	
	public System.Data.Linq.Table<Championship> Championships
	{
		get
		{
			return this.GetTable<Championship>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerChampionship")]
public partial class PlayerChampionship : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _IdPlayer;
	
	private int _IdChamp;
	
	private EntityRef<Player> _Player;
	
	private EntityRef<Championship> _Championship;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdPlayerChanging(int value);
    partial void OnIdPlayerChanged();
    partial void OnIdChampChanging(int value);
    partial void OnIdChampChanged();
    #endregion
	
	public PlayerChampionship()
	{
		this._Player = default(EntityRef<Player>);
		this._Championship = default(EntityRef<Championship>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPlayer", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IdPlayer
	{
		get
		{
			return this._IdPlayer;
		}
		set
		{
			if ((this._IdPlayer != value))
			{
				if (this._Player.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdPlayerChanging(value);
				this.SendPropertyChanging();
				this._IdPlayer = value;
				this.SendPropertyChanged("IdPlayer");
				this.OnIdPlayerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdChamp", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int IdChamp
	{
		get
		{
			return this._IdChamp;
		}
		set
		{
			if ((this._IdChamp != value))
			{
				if (this._Championship.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIdChampChanging(value);
				this.SendPropertyChanging();
				this._IdChamp = value;
				this.SendPropertyChanged("IdChamp");
				this.OnIdChampChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerChampionship", Storage="_Player", ThisKey="IdPlayer", OtherKey="Player_Id", IsForeignKey=true)]
	public Player Player
	{
		get
		{
			return this._Player.Entity;
		}
		set
		{
			Player previousValue = this._Player.Entity;
			if (((previousValue != value) 
						|| (this._Player.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player.Entity = null;
					previousValue.PlayerChampionships.Remove(this);
				}
				this._Player.Entity = value;
				if ((value != null))
				{
					value.PlayerChampionships.Add(this);
					this._IdPlayer = value.Player_Id;
				}
				else
				{
					this._IdPlayer = default(int);
				}
				this.SendPropertyChanged("Player");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Championship_PlayerChampionship", Storage="_Championship", ThisKey="IdChamp", OtherKey="Id", IsForeignKey=true)]
	public Championship Championship
	{
		get
		{
			return this._Championship.Entity;
		}
		set
		{
			Championship previousValue = this._Championship.Entity;
			if (((previousValue != value) 
						|| (this._Championship.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Championship.Entity = null;
					previousValue.PlayerChampionships.Remove(this);
				}
				this._Championship.Entity = value;
				if ((value != null))
				{
					value.PlayerChampionships.Add(this);
					this._IdChamp = value.Id;
				}
				else
				{
					this._IdChamp = default(int);
				}
				this.SendPropertyChanged("Championship");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Games")]
public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GameId;
	
	private int _PlayerIdX;
	
	private int _PlayerIdCircle;
	
	private string _GameMode;
	
	private System.Nullable<int> _winner;
	
	private EntitySet<gameMove> _gameMoves;
	
	private EntityRef<Player> _Player;
	
	private EntityRef<Player> _Player1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnPlayerIdXChanging(int value);
    partial void OnPlayerIdXChanged();
    partial void OnPlayerIdCircleChanging(int value);
    partial void OnPlayerIdCircleChanged();
    partial void OnGameModeChanging(string value);
    partial void OnGameModeChanged();
    partial void OnwinnerChanging(System.Nullable<int> value);
    partial void OnwinnerChanged();
    #endregion
	
	public Game()
	{
		this._gameMoves = new EntitySet<gameMove>(new Action<gameMove>(this.attach_gameMoves), new Action<gameMove>(this.detach_gameMoves));
		this._Player = default(EntityRef<Player>);
		this._Player1 = default(EntityRef<Player>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int GameId
	{
		get
		{
			return this._GameId;
		}
		set
		{
			if ((this._GameId != value))
			{
				this.OnGameIdChanging(value);
				this.SendPropertyChanging();
				this._GameId = value;
				this.SendPropertyChanged("GameId");
				this.OnGameIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerIdX", DbType="Int NOT NULL")]
	public int PlayerIdX
	{
		get
		{
			return this._PlayerIdX;
		}
		set
		{
			if ((this._PlayerIdX != value))
			{
				if (this._Player1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPlayerIdXChanging(value);
				this.SendPropertyChanging();
				this._PlayerIdX = value;
				this.SendPropertyChanged("PlayerIdX");
				this.OnPlayerIdXChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerIdCircle", DbType="Int NOT NULL")]
	public int PlayerIdCircle
	{
		get
		{
			return this._PlayerIdCircle;
		}
		set
		{
			if ((this._PlayerIdCircle != value))
			{
				if (this._Player.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPlayerIdCircleChanging(value);
				this.SendPropertyChanging();
				this._PlayerIdCircle = value;
				this.SendPropertyChanged("PlayerIdCircle");
				this.OnPlayerIdCircleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameMode", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string GameMode
	{
		get
		{
			return this._GameMode;
		}
		set
		{
			if ((this._GameMode != value))
			{
				this.OnGameModeChanging(value);
				this.SendPropertyChanging();
				this._GameMode = value;
				this.SendPropertyChanged("GameMode");
				this.OnGameModeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_winner", DbType="Int")]
	public System.Nullable<int> winner
	{
		get
		{
			return this._winner;
		}
		set
		{
			if ((this._winner != value))
			{
				this.OnwinnerChanging(value);
				this.SendPropertyChanging();
				this._winner = value;
				this.SendPropertyChanged("winner");
				this.OnwinnerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_gameMove", Storage="_gameMoves", ThisKey="GameId", OtherKey="gameId")]
	public EntitySet<gameMove> gameMoves
	{
		get
		{
			return this._gameMoves;
		}
		set
		{
			this._gameMoves.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Player", ThisKey="PlayerIdCircle", OtherKey="Player_Id", IsForeignKey=true)]
	public Player Player
	{
		get
		{
			return this._Player.Entity;
		}
		set
		{
			Player previousValue = this._Player.Entity;
			if (((previousValue != value) 
						|| (this._Player.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player.Entity = null;
					previousValue.Games.Remove(this);
				}
				this._Player.Entity = value;
				if ((value != null))
				{
					value.Games.Add(this);
					this._PlayerIdCircle = value.Player_Id;
				}
				else
				{
					this._PlayerIdCircle = default(int);
				}
				this.SendPropertyChanged("Player");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game1", Storage="_Player1", ThisKey="PlayerIdX", OtherKey="Player_Id", IsForeignKey=true)]
	public Player Player1
	{
		get
		{
			return this._Player1.Entity;
		}
		set
		{
			Player previousValue = this._Player1.Entity;
			if (((previousValue != value) 
						|| (this._Player1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player1.Entity = null;
					previousValue.Games1.Remove(this);
				}
				this._Player1.Entity = value;
				if ((value != null))
				{
					value.Games1.Add(this);
					this._PlayerIdX = value.Player_Id;
				}
				else
				{
					this._PlayerIdX = default(int);
				}
				this.SendPropertyChanged("Player1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_gameMoves(gameMove entity)
	{
		this.SendPropertyChanging();
		entity.Game = this;
	}
	
	private void detach_gameMoves(gameMove entity)
	{
		this.SendPropertyChanging();
		entity.Game = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.gameMoves")]
public partial class gameMove : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _gameId;
	
	private int _moveNumber;
	
	private int _shape;
	
	private System.Nullable<int> _place;
	
	private EntityRef<Game> _Game;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OngameIdChanging(int value);
    partial void OngameIdChanged();
    partial void OnmoveNumberChanging(int value);
    partial void OnmoveNumberChanged();
    partial void OnshapeChanging(int value);
    partial void OnshapeChanged();
    partial void OnplaceChanging(System.Nullable<int> value);
    partial void OnplaceChanged();
    #endregion
	
	public gameMove()
	{
		this._Game = default(EntityRef<Game>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gameId", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int gameId
	{
		get
		{
			return this._gameId;
		}
		set
		{
			if ((this._gameId != value))
			{
				if (this._Game.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OngameIdChanging(value);
				this.SendPropertyChanging();
				this._gameId = value;
				this.SendPropertyChanged("gameId");
				this.OngameIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_moveNumber", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int moveNumber
	{
		get
		{
			return this._moveNumber;
		}
		set
		{
			if ((this._moveNumber != value))
			{
				this.OnmoveNumberChanging(value);
				this.SendPropertyChanging();
				this._moveNumber = value;
				this.SendPropertyChanged("moveNumber");
				this.OnmoveNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_shape", DbType="Int NOT NULL")]
	public int shape
	{
		get
		{
			return this._shape;
		}
		set
		{
			if ((this._shape != value))
			{
				this.OnshapeChanging(value);
				this.SendPropertyChanging();
				this._shape = value;
				this.SendPropertyChanged("shape");
				this.OnshapeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_place", DbType="Int")]
	public System.Nullable<int> place
	{
		get
		{
			return this._place;
		}
		set
		{
			if ((this._place != value))
			{
				this.OnplaceChanging(value);
				this.SendPropertyChanging();
				this._place = value;
				this.SendPropertyChanged("place");
				this.OnplaceChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Game_gameMove", Storage="_Game", ThisKey="gameId", OtherKey="GameId", IsForeignKey=true)]
	public Game Game
	{
		get
		{
			return this._Game.Entity;
		}
		set
		{
			Game previousValue = this._Game.Entity;
			if (((previousValue != value) 
						|| (this._Game.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Game.Entity = null;
					previousValue.gameMoves.Remove(this);
				}
				this._Game.Entity = value;
				if ((value != null))
				{
					value.gameMoves.Add(this);
					this._gameId = value.GameId;
				}
				else
				{
					this._gameId = default(int);
				}
				this.SendPropertyChanged("Game");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Player_Id;
	
	private string _First_Name;
	
	private string _Last_Name;
	
	private System.Nullable<int> _Advisor_To;
	
	private bool _Is_Availbale;
	
	private bool _Is_Advisor;
	
	private System.Data.Linq.Binary _picture;
	
	private bool _Is_Active;
	
	private EntitySet<PlayerChampionship> _PlayerChampionships;
	
	private EntitySet<Game> _Games;
	
	private EntitySet<Game> _Games1;
	
	private EntitySet<Player> _Players;
	
	private EntitySet<Championship> _Championships;
	
	private EntityRef<Player> _Player1;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayer_IdChanging(int value);
    partial void OnPlayer_IdChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnAdvisor_ToChanging(System.Nullable<int> value);
    partial void OnAdvisor_ToChanged();
    partial void OnIs_AvailbaleChanging(bool value);
    partial void OnIs_AvailbaleChanged();
    partial void OnIs_AdvisorChanging(bool value);
    partial void OnIs_AdvisorChanged();
    partial void OnpictureChanging(System.Data.Linq.Binary value);
    partial void OnpictureChanged();
    partial void OnIs_ActiveChanging(bool value);
    partial void OnIs_ActiveChanged();
    #endregion
	
	public Player()
	{
		this._PlayerChampionships = new EntitySet<PlayerChampionship>(new Action<PlayerChampionship>(this.attach_PlayerChampionships), new Action<PlayerChampionship>(this.detach_PlayerChampionships));
		this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
		this._Games1 = new EntitySet<Game>(new Action<Game>(this.attach_Games1), new Action<Game>(this.detach_Games1));
		this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
		this._Championships = new EntitySet<Championship>(new Action<Championship>(this.attach_Championships), new Action<Championship>(this.detach_Championships));
		this._Player1 = default(EntityRef<Player>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Player_Id
	{
		get
		{
			return this._Player_Id;
		}
		set
		{
			if ((this._Player_Id != value))
			{
				this.OnPlayer_IdChanging(value);
				this.SendPropertyChanging();
				this._Player_Id = value;
				this.SendPropertyChanged("Player_Id");
				this.OnPlayer_IdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string First_Name
	{
		get
		{
			return this._First_Name;
		}
		set
		{
			if ((this._First_Name != value))
			{
				this.OnFirst_NameChanging(value);
				this.SendPropertyChanging();
				this._First_Name = value;
				this.SendPropertyChanged("First_Name");
				this.OnFirst_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50)")]
	public string Last_Name
	{
		get
		{
			return this._Last_Name;
		}
		set
		{
			if ((this._Last_Name != value))
			{
				this.OnLast_NameChanging(value);
				this.SendPropertyChanging();
				this._Last_Name = value;
				this.SendPropertyChanged("Last_Name");
				this.OnLast_NameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Advisor_To", DbType="Int")]
	public System.Nullable<int> Advisor_To
	{
		get
		{
			return this._Advisor_To;
		}
		set
		{
			if ((this._Advisor_To != value))
			{
				if (this._Player1.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnAdvisor_ToChanging(value);
				this.SendPropertyChanging();
				this._Advisor_To = value;
				this.SendPropertyChanged("Advisor_To");
				this.OnAdvisor_ToChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Availbale", DbType="Bit NOT NULL")]
	public bool Is_Availbale
	{
		get
		{
			return this._Is_Availbale;
		}
		set
		{
			if ((this._Is_Availbale != value))
			{
				this.OnIs_AvailbaleChanging(value);
				this.SendPropertyChanging();
				this._Is_Availbale = value;
				this.SendPropertyChanged("Is_Availbale");
				this.OnIs_AvailbaleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Advisor", DbType="Bit NOT NULL")]
	public bool Is_Advisor
	{
		get
		{
			return this._Is_Advisor;
		}
		set
		{
			if ((this._Is_Advisor != value))
			{
				this.OnIs_AdvisorChanging(value);
				this.SendPropertyChanging();
				this._Is_Advisor = value;
				this.SendPropertyChanged("Is_Advisor");
				this.OnIs_AdvisorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary picture
	{
		get
		{
			return this._picture;
		}
		set
		{
			if ((this._picture != value))
			{
				this.OnpictureChanging(value);
				this.SendPropertyChanging();
				this._picture = value;
				this.SendPropertyChanged("picture");
				this.OnpictureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit NOT NULL")]
	public bool Is_Active
	{
		get
		{
			return this._Is_Active;
		}
		set
		{
			if ((this._Is_Active != value))
			{
				this.OnIs_ActiveChanging(value);
				this.SendPropertyChanging();
				this._Is_Active = value;
				this.SendPropertyChanged("Is_Active");
				this.OnIs_ActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_PlayerChampionship", Storage="_PlayerChampionships", ThisKey="Player_Id", OtherKey="IdPlayer")]
	public EntitySet<PlayerChampionship> PlayerChampionships
	{
		get
		{
			return this._PlayerChampionships;
		}
		set
		{
			this._PlayerChampionships.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game", Storage="_Games", ThisKey="Player_Id", OtherKey="PlayerIdCircle")]
	public EntitySet<Game> Games
	{
		get
		{
			return this._Games;
		}
		set
		{
			this._Games.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Game1", Storage="_Games1", ThisKey="Player_Id", OtherKey="PlayerIdX")]
	public EntitySet<Game> Games1
	{
		get
		{
			return this._Games1;
		}
		set
		{
			this._Games1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Player", Storage="_Players", ThisKey="Player_Id", OtherKey="Advisor_To")]
	public EntitySet<Player> Players
	{
		get
		{
			return this._Players;
		}
		set
		{
			this._Players.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Championship", Storage="_Championships", ThisKey="Player_Id", OtherKey="CreatedBy")]
	public EntitySet<Championship> Championships
	{
		get
		{
			return this._Championships;
		}
		set
		{
			this._Championships.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Player", Storage="_Player1", ThisKey="Advisor_To", OtherKey="Player_Id", IsForeignKey=true)]
	public Player Player1
	{
		get
		{
			return this._Player1.Entity;
		}
		set
		{
			Player previousValue = this._Player1.Entity;
			if (((previousValue != value) 
						|| (this._Player1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player1.Entity = null;
					previousValue.Players.Remove(this);
				}
				this._Player1.Entity = value;
				if ((value != null))
				{
					value.Players.Add(this);
					this._Advisor_To = value.Player_Id;
				}
				else
				{
					this._Advisor_To = default(Nullable<int>);
				}
				this.SendPropertyChanged("Player1");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PlayerChampionships(PlayerChampionship entity)
	{
		this.SendPropertyChanging();
		entity.Player = this;
	}
	
	private void detach_PlayerChampionships(PlayerChampionship entity)
	{
		this.SendPropertyChanging();
		entity.Player = null;
	}
	
	private void attach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Player = this;
	}
	
	private void detach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Player = null;
	}
	
	private void attach_Games1(Game entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = this;
	}
	
	private void detach_Games1(Game entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = null;
	}
	
	private void attach_Players(Player entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = this;
	}
	
	private void detach_Players(Player entity)
	{
		this.SendPropertyChanging();
		entity.Player1 = null;
	}
	
	private void attach_Championships(Championship entity)
	{
		this.SendPropertyChanging();
		entity.Player = this;
	}
	
	private void detach_Championships(Championship entity)
	{
		this.SendPropertyChanging();
		entity.Player = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Championship")]
public partial class Championship : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Location;
	
	private System.DateTime _Date;
	
	private System.Data.Linq.Binary _Picture;
	
	private int _CreatedBy;
	
	private EntitySet<PlayerChampionship> _PlayerChampionships;
	
	private EntityRef<Player> _Player;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnPictureChanging(System.Data.Linq.Binary value);
    partial void OnPictureChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    #endregion
	
	public Championship()
	{
		this._PlayerChampionships = new EntitySet<PlayerChampionship>(new Action<PlayerChampionship>(this.attach_PlayerChampionships), new Action<PlayerChampionship>(this.detach_PlayerChampionships));
		this._Player = default(EntityRef<Player>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(50)")]
	public string Location
	{
		get
		{
			return this._Location;
		}
		set
		{
			if ((this._Location != value))
			{
				this.OnLocationChanging(value);
				this.SendPropertyChanging();
				this._Location = value;
				this.SendPropertyChanged("Location");
				this.OnLocationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
	public System.DateTime Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Picture", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this.OnPictureChanging(value);
				this.SendPropertyChanging();
				this._Picture = value;
				this.SendPropertyChanged("Picture");
				this.OnPictureChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int NOT NULL")]
	public int CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				if (this._Player.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Championship_PlayerChampionship", Storage="_PlayerChampionships", ThisKey="Id", OtherKey="IdChamp")]
	public EntitySet<PlayerChampionship> PlayerChampionships
	{
		get
		{
			return this._PlayerChampionships;
		}
		set
		{
			this._PlayerChampionships.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Championship", Storage="_Player", ThisKey="CreatedBy", OtherKey="Player_Id", IsForeignKey=true)]
	public Player Player
	{
		get
		{
			return this._Player.Entity;
		}
		set
		{
			Player previousValue = this._Player.Entity;
			if (((previousValue != value) 
						|| (this._Player.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Player.Entity = null;
					previousValue.Championships.Remove(this);
				}
				this._Player.Entity = value;
				if ((value != null))
				{
					value.Championships.Add(this);
					this._CreatedBy = value.Player_Id;
				}
				else
				{
					this._CreatedBy = default(int);
				}
				this.SendPropertyChanged("Player");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PlayerChampionships(PlayerChampionship entity)
	{
		this.SendPropertyChanging();
		entity.Championship = this;
	}
	
	private void detach_PlayerChampionships(PlayerChampionship entity)
	{
		this.SendPropertyChanging();
		entity.Championship = null;
	}
}
#pragma warning restore 1591
